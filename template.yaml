AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  kafka-pipeline

  Sample SAM Template for kafka-pipeline

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  ApplicationName:
    Type: String
    Default: 'kafka-application'
  MainDataBucket:
    Type: String
    Default: 'cc-final-project-part3-backend'
  MainDataBucketArn:
    Type: String
    Default: 'arn:aws:s3:::cc-final-project-part3-backend'

  ReadCapacityUnits:
    Description: Provisioned read throughput
    Type: Number
    Default: '5'
    MinValue: '5'
    MaxValue: '10000'
    ConstraintDescription: must be between 5 and 10000
  WriteCapacityUnits:
    Description: Provisioned write throughput
    Type: Number
    Default: '10'
    MinValue: '5'
    MaxValue: '10000'
    ConstraintDescription: must be between 5 and 10000


Resources:

  # S3 Bucket Resource
  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub '${MainDataBucket}'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
              - 'x-amz-*'
              - 'Authorization'
            AllowedMethods:
              - GET
              - POST
              - PUT
              - HEAD
            AllowedOrigins:
              - '*'
            Id: Cognito-Authentication-CorsRule
            MaxAge: 3000
  # End Logging Resource

  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: "LoggingBucket"
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: "LoggingBucket"
                  - "/*"
            Principal: "*"
          - Action:
              - "s3:ListBucket"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: "LoggingBucket"
                  - ""
            Principal: "*"








  ProducerT1Function: # authroize_purchase
    Type: AWS::Serverless::Function 
    Description: Lambda to produce events to T1 and T2
    Properties:
      FunctionName: Producer_t1
      CodeUri: producer-t1/
      Handler: producer_t1.lambda_handler
      Runtime: python3.7
      Role: !GetAtt [ LambaExecutionRole, Arn ]
      Layers:
      - !Ref KafkaProcessingLayer
      # Events:
      #   HelloWorld:
      #     Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
      #     Properties:
      #       Path: /hello
  #     #       Method: get

  ConsumerT1Function: # authroize_purchase
    Type: AWS::Serverless::Function 
    Description: Lambda to consume events from topic 1
    Properties:
      FunctionName: Consumer_t1
      CodeUri: consumer-t1/
      Handler: consumer_t1.lambda_handler
      Runtime: python3.7
      Role: !GetAtt [ LambaExecutionRole, Arn ]
      Layers:
      - !Ref KafkaProcessingLayer

  EventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: arn:aws:kafka:us-east-1:922059106485:cluster/KafkaCluster4/bf9e38a0-436f-47bd-9896-c386b922397c-11
      FunctionName: !Ref ConsumerT1Function
      StartingPosition : LATEST
      Topics:
        - authorize_purchase


  ProducerT2T3Function: # approved and not_approved
    Type: AWS::Serverless::Function 
    Description: Lambda to produce events to t3
    Properties:
      FunctionName: Producer_t2_t3
      CodeUri: producer-t2-t3/
      Handler: producer_t2_t3.lambda_handler
      Runtime: python3.7
      Role: !GetAtt [ LambaExecutionRole, Arn ]
      Layers:
      - !Ref KafkaProcessingLayer

  ConsumerT2Function: # approved
    Type: AWS::Serverless::Function 
    Description: Lambda to consume events from topic 2
    Properties:
      FunctionName: Consumer_t2
      CodeUri: consumer-t2/
      Handler: consumer_t2.lambda_handler
      Runtime: python3.7
      Role: !GetAtt [ LambaExecutionRole, Arn ]
      Layers:
      - !Ref KafkaProcessingLayer


  EventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: arn:aws:kafka:us-east-1:922059106485:cluster/KafkaCluster4/bf9e38a0-436f-47bd-9896-c386b922397c-11
      FunctionName: !Ref ConsumerT2Function
      StartingPosition : LATEST
      Topics:
        - approved


  ConsumerT3Function: # not_approved
    Type: AWS::Serverless::Function 
    Description: Lambda to produce events to t3
    Properties:
      FunctionName: Consumer_t3
      CodeUri: consumer-t3/
      Handler: consumer_t3.lambda_handler
      Runtime: python3.7
      Role: !GetAtt [ LambaExecutionRole, Arn ]
      Layers:
      - !Ref KafkaProcessingLayer

  EventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: arn:aws:kafka:us-east-1:922059106485:cluster/KafkaCluster4/bf9e38a0-436f-47bd-9896-c386b922397c-11
      FunctionName: !Ref ConsumerT3Function
      StartingPosition : LATEST
      Topics:
        - not_approved


  ProducerT4Function: #generate_reports
    Type: AWS::Serverless::Function 
    Description: Lambda to produce events to T1 and T2
    Properties:
      FunctionName: Producer_t4
      CodeUri: producer-t4/
      Handler: producer_t4.lambda_handler
      Runtime: python3.7
      Role: !GetAtt [ LambaExecutionRole, Arn ]
      Layers:
      - !Ref KafkaProcessingLayer


  ConsumerT4Function: # generate_reports
    Type: AWS::Serverless::Function 
    Description: Lambda to produce events to t3
    Properties:
      FunctionName: Consumer_t4
      CodeUri: consumer-t4/
      Handler: consumer_t4.lambda_handler
      Runtime: python3.7
      Role: !GetAtt [ LambaExecutionRole, Arn ]
      Layers:
      - !Ref KafkaProcessingLayer

  EventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: arn:aws:kafka:us-east-1:922059106485:cluster/KafkaCluster4/bf9e38a0-436f-47bd-9896-c386b922397c-11
      FunctionName: !Ref ConsumerT4Function
      StartingPosition : LATEST
      Topics:
        - generate_reports

 
  KafkaProcessingLib:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/layers/kafka-layer/
      Handler: app.lambda_handler
      Runtime: python3.7






  KafkaProcessingLayer:
    Type: AWS::Serverless::LayerVersion
    DependsOn: KafkaProcessingLib
    Properties:
      Description: Lambda layer for writing additional functions for indexing and searching images
      LayerName: KafkaProcessingLib
      ContentUri: ./.aws-sam/build/KafkaProcessingLib
      CompatibleRuntimes: 
        - python3.7
      RetentionPolicy: Delete

  LambaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Ref MainDataBucketArn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: !Join ["/", [!Ref MainDataBucketArn, "*"]]
              - Effect: Allow
                Action:
                - cloudwatch:PutMetricData
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:CreateLogGroup
                - logs:DescribeLogStreams
                Resource: "*"
              - Effect: Allow
                Action:
                - dynamodb:BatchGetItem
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:BatchWriteItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                Resource: "arn:aws:dynamodb:*"


  testDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: uuid
          AttributeType: S
      KeySchema: 
        - AttributeName: uuid
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref 'ReadCapacityUnits'
        WriteCapacityUnits: !Ref 'WriteCapacityUnits'
      TableName: credit-card-purchases




Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   # HelloWorldApi:
#   #   Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#   #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  ProducerT1Function:
    Description: "Producer Function T1 T2"
    Value: !GetAtt ProducerT1Function.Arn

  # ProducerT1T2FunctionIamRole:
  #   Description: "Implicit IAM Role created for Producer Function T1 T2"
  #   Value: !GetAtt ProducerT1T2Role.Arn


  ConsumerT1Function:
    Description: "Producer Function T1 T2"
    Value: !GetAtt ConsumerT1Function.Arn

  # ConsumerT1FunctionIamRole:
  #   Description: "Implicit IAM Role created for Producer Function T1 T2"
  #   Value: !GetAtt ConsumerT1Role.Arn
    
  ProducerT2T3Function:
    Description: "Producer Function T1 T2"
    Value: !GetAtt ProducerT2T3Function.Arn



  ConsumerT2Function:
    Description: "Producer Function T1 T2"
    Value: !GetAtt ConsumerT2Function.Arn

  # ConsumerT2FunctionIamRole:
  #   Description: "Implicit IAM Role created for Producer Function T1 T2"
  #   Value: !GetAtt ConsumerT2Role.Arn



    
  # ProducerT3FunctionIamRole:
  #   Description: "Implicit IAM Role created for Producer Function T1 T2"
  #   Value: !GetAtt ProducerT3Role.Arn


  ConsumerT3Function:
    Description: "Producer Function T1 T2"
    Value: !GetAtt ConsumerT3Function.Arn
  # ConsumerT3FunctionIamRole:
  #   Description: "Implicit IAM Role created for Producer Function T1 T2"
  #   Value: !GetAtt ConsumerT3Role.Arn

  ProducerT4Function:
    Description: "Producer Function T1 T2"
    Value: !GetAtt ProducerT4Function.Arn



  ConsumerT4Function:
    Description: "Producer Function T1 T2"
    Value: !GetAtt ConsumerT4Function.Arn



  KafkaProcessingLib:
    Description: "Processing Layer"
    Value: !GetAtt KafkaProcessingLib.Arn

  TableName:
    Value: !Ref 'testDynamoDBTable'
    Description: Table name of the newly created DynamoDB table

